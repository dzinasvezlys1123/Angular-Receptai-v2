{"ast":null,"code":"import { BehaviorSubject, catchError, tap, throwError } from 'rxjs';\nimport { User } from './user.model';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.user = new BehaviorSubject(null); // we will use it on the login and singup to set the data\n    }\n\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n      }\n    }\n\n    singUp(email, pass) {\n      // start of singup\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' + environment.APIKey, {\n        email: email,\n        password: pass,\n        returnSecureToken: true\n      }).pipe(catchError(this.errorHandlling), //tap to pass a function to deal with the responce we create a new user instance and dass it to the subject to deal with it\n      tap(responcedata => {\n        const expirationDate = new Date(new Date().getTime() + +responcedata.expiresIn * 1000);\n        const user = new User(responcedata.email, responcedata.localId, responcedata.idToken, expirationDate);\n        this.user.next(user);\n      }));\n    } //end of singup\n\n\n    login(email, password) {\n      //start of log in\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' + environment.APIKey, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.errorHandlling), tap(responcedata => {\n        const expirationDate = new Date(new Date().getTime() + +responcedata.expiresIn * 1000);\n        const user = new User(responcedata.email, responcedata.localId, responcedata.idToken, expirationDate);\n        this.user.next(user);\n        localStorage.setItem('userData', JSON.stringify(user)); //to save the user on the local storage as string\n      }));\n    } // end of login\n\n\n    errorHandlling(errorRes) {\n      let errorMessage = 'Unkunown Error check internet connection';\n\n      if (!errorRes.error || !errorRes.error.error) {\n        // if there is no responce with the error from the backend\n        return throwError(() => new Error(errorMessage));\n      }\n\n      switch (errorRes.error.error.message) {\n        //thous errors came from the server responce\n        case 'EMAIL_EXISTS':\n          errorMessage = 'The email address is already in use by another account';\n          break;\n\n        case 'OPERATION_NOT_ALLOWED':\n          errorMessage = 'Password sign-in is disabled for this project';\n          break;\n\n        case 'TOO_MANY_ATTEMPTS_TRY_LATER':\n          errorMessage = 'We have blocked all requests from this device due to unusual activity. Try again later.';\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = ' There is no user record corresponding to this identifier. The user may have been deleted.';\n          break;\n\n        case 'INVALID_PASSWORD':\n          errorMessage = 'The password is invalid or the user does not have a password.';\n          break;\n\n        case 'USER_DISABLED':\n          errorMessage = 'The user account has been disabled by an administrator.';\n      }\n\n      return throwError(() => new Error(errorMessage));\n    }\n\n    logout() {\n      this.user.next(null);\n      localStorage.removeItem('userData');\n\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n    }\n\n    autoLogout(expirationDate) {\n      this.tokenExpirationTimer = setTimeout(() => {\n        this.logout();\n      }, expirationDate);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}